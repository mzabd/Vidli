        // GET: Movies/Random
        //public ActionResult Random()
        //{
        //    // initialize a movie object
        //    //var movie=  new Movie{Name = "Shrek"};
        //    ////list of customer
        //    //List<Customer> customers = new List<Customer>
        //    //{
        //    //    new Customer{Id = 101, Name = "Customer1"},
        //    //    new Customer{Id = 102, Name = "Customer2"},
        //    //    new Customer{Id = 103, Name = "Customer3"},
        //    //};

        //    //create a viewsmodel object and initalize it
        //    //var viewModel = new RandomMovieViewModel
        //    //{
        //    //    Movie = movie,
        //    //    Customers = customers
        //    //};
        //    //we can pass data to view by controller property ViewData dictionary
        //    //ViewData["Movie"] = movie; //like using a key for the data
        //    //by usnig viewbag
        //    //ViewBag.Movie = movie;
        //    //it is better not using both of the above rather using model
        //    //return View(viewModel);  
        //    //return HttpNotFound();
        //    //return new EmptyResult();
        //    //return Content("Hello");
        //    //return RedirectToAction("Index", "Home", new{page= 1}); //third one is annonymous object
        //}

		//optional parameter : retrun a list of movies //movies
        //public ActionResult Index(int? pageIndex, string sortBy) //? to make nullable
        //{
        //    //if page index is not specified the movie will displayed in page 1
        //    if (!pageIndex.HasValue)
        //        pageIndex = 1;
        //    //if sort by is not specified movies will be sort by their name
        //    if (String.IsNullOrWhiteSpace(sortBy))
        //        sortBy = "Name";
        //    return Content($"pageIndex={pageIndex} & sortBy={sortBy} ");
        //}

        
        //type: MVCAction4 for code snippet
        //for custom route: movies/released/{year}/{month}
        //we will use attribute route with url and constrains
        [Route("movies/released/{year}/{month:regex(\\d{2}):range(1,12)}")]
        public ActionResult ByReleasedDate(int year, byte month)
        {
            return Content(year + " / " + month);
        }
Create project
==============
by clicking both MVC and WebApi also single user ac

ViewModel
=========
we need viewModel folder to contain class for view as Model class are suppose to act as domain class

Partial Views
=============
Shared > add > _NavBar (by convention it starts wiht _) > click tick on partial views, so that it will not have a layout

Rendering partial views: here we did it in _Layput.chtml >> @Html.Partial("name of partial view", can put model as second arg)

collapse : put cursor and press cntrl + m (twice)

using model pref in view
========================
@model Vidly.Models.Movie 
ActionLink:
==========
@Html.ActionLink(
    linkText,
    actionName,
    controllerName,
    routeValues: new {
        Param1Name= Param1Value, 
        Param2Name = Param2Value 
    },
    htmlAttributes: null
)

will generate link as: /Controller/Action/Param1Value?Param2Name=Param2Value


@model Vidly.ViewModels.RandomMovieViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

====================
Code First Approach:
====================

Code First Migration
--------------------
*First install Entity Framework
* Add a class to main porject as belpw
    public class MyDbContext:DbContext 
    {
        public MyDbContext()
        {
 
        }
    }
* Tools > Nuget Package Manager > Package Manager Console > to enable migrations -(w) enable-migrations
//To create migrations: (w) add-migration "Migration_Name"
//to over right: (w) add-migration "name" -force
//to generate databse throug migration: (w)update-database
//cls to clear screen
//for updating model for new entity in table or new business rules > we should create small changes > create migration 
// > run in DB :: changes in Customer Model > add-Migration 'AddIsSubscribedCustomer' > update-databse
//for populating table with data: do it by migration:: add-maigratin PopulateMembershipType
//now inthe up method provide sql query in Sql() and at last > update-database

addColumn:
---------
//make new properties in desired model
//create a new migration and update db

Update/insert column:
--------------
//make new migration
//provide sql query with UPDATE/insert
//update db

AlterColumn:
------------
//put attribute like [Rquired] in Model class properties and then make a new migration and at last update db

Query Object using EF: (in customer controller we did it for hard coded data in GetCustomer)
----------------------
1. we need a dbcontex to access DB. So we declare a private field in Controller:
	private ApplicationDbContext _context;
2. then we need to initialize it in constructor
3. As dbcontext is a disposable object we need ot dispose it properly as below
	  protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }
4.now assigned _context.cusotmer to customers object which is a DBset for differed execution from db - 
	a DBset is the collection of all entities in the context
5. to get the customer data from db we need to iterate thru the customers object or we can do it by adding ToList() also using SingleOrDefalt() in Detail route
6. Now we can populate customer table with some data as we are doing it as aribatry so no need it by query and migration and we will not get this data later from migration: 
	rightClick dbo.Customers table of SqlServerObjectExplorer > view data > provide data
5. Eager loading: to load related object : here Membershiptype is related object to customer, so to get the info of Membershiptype we need to
	-need to load Customer and MembershipType together > use Include(Expressions) after _context.Customer in Customer controller

Make a short cut for console Manager
====================================
tools > options > Environment > keyboard > type: packagemanagerconsole > in shortcut: hold alt key and press / and . >assign >ok/

================
Forms: leture: 38
================
1. Make a actionResult (new for example) in controller
2. Create a view for it
3. In chtml > Html.BeginForm("Name of the target Actinon", Controller)  - this is a begining tag of form - a form is also a disposable object
	for this reason we add @using(Html.BegingForm(..)) {...} so it can be disposed and in the disposed method it will render the closing </form>
4.to render modern responsive form: we need to follow special mark up like: wrap each input field in >> 
	<div class="form-group"></div> - which is also bootstrap understand.
5. Inside the div we can use raw html or Html.LabelFor(use a lambda expression for the targer properties from model);
6. for textbox: we can use raw html or Html.TextBoxFor(m => m.Name) - this is helpful for like data-validatino auotimatically as per model
7. as the second arg in Html.TextBoxFor(m => m.Name, 2nd) > we can pass an annonymous obj. like (.., new {@any propertis add to this object will render as html attrbutes})
	Like: (.., new {@class="form-control"}) - this will give form a modern look and feel from bootstrap class
Form-Lables:
-----------
if we want to change the label name from the property name of model there are two ways
1. we cand do it with raw html <label for="Birthdate"> Date of Birth </label> - here 'for' is used to focus it for Birthdate properties
2. we can use data-annotations in model porpeties like: [Display(Name= "Date of Birth")] for Birthdate properties

Drop-Down: 40
-------------
1. check if there is already a dbset declared for your model, if not create it in identity model
2. declare a context object for it in new route as: var membershipTypes = _context.MembershipTypes
3.To add a dropDown in view: @Html.DropDownListFor(m => m.Customer.MembershipType,2nd arg, 3rd, 4th})
	2nd arg: list of items for the dropdown (..., new SelectList(lsitOfItems, ))
	: (..., new SelectList(Modle.MembershipTypes, property holds the value, property that holds the text))
	3rd arg: " " - possibly as it will be at the top or "Select"
	4th: the annonymous obj for html bootstrap

Model Binding and using button:
-------------------------------
1. add a button at the end
2. make the "create" action in controller to pass from date with [HttpPost] annotation
3.add a parameter for model binding: for example data for newcsutomerviewmodel, we need to pass a param that object type, but here we will bind it with customer as all the data are prefix wiht customer
4. now to add the data to db we need add it first to context as a part of our changes(add/modify/delete)
5. persist this changes we need to save changes: _context.SaveChanges(). it will generate sql statement and all this will wraped in a transaction
6. at this point we need to redirect to desired page (here it is list of customer)

Edit form
---------
1. we changed the detail action in index view to Edit actin and added an action in Customer controller. There is a id param in view which will send to Edit
2. in the Edit action: we initialize customer and membershiptype context for the particular viewModel (CustomerFormVeiwModel)
3.return a view (here it is CustomerForm which will populated by data from customerFormViewModel)
update:
------
4. One approach is to modify the current name of "create" action/view to 'save' (another by creating a new view name update)
5. in the save action: we check if the customer has an id or not, if the id ==0 > it is a new customer, so add it db > if not - it is an existing one and update it in db
6. in update (else): we need to first get the data of customer form db as per the id
7. now we update it: and it can be in two ways: a. using TryUpdateModel() however it leads to poor security
** as we are doing it as per customerId, we need to gram customer id from from, so we need to set it in from as hidden field
**Troubleshooting entity validatin: L-47

================
Validation :L-50
=================
1. there are three steps
	a. add data annotations in entities(model-properties)
	b. use ModelStat.Valid - if valid change the flow of the progra if not return the same view (ex: customerController/save)
	c.Add validatin message next to each field in the form //@Html.ValidationMessageFor(m=>m.) //to change the color use span>class: "field-validation-error " in css
Validation by data annotation:
-----------------------------
1. see cheat sheet for data annotation :[Required]/ [Range(1,10)]/[Compare("Other property like password")]
2. all these data annotation has default validation message, but these messages can be overrite, as for required: [Required(ErrorMessage ="...")]
Custom Validation:
------------------
1. for example we implement a business rule like for any membership the cusotomer needs to be 18 years old except "Pay as you go"
2. we make a class for this purpose which derives from ValidationAttribute class
3.override IsValid() then put annotation in Birthdate properties of customer with the created class name, like [Min18YearsIfAMemeber]
4. Follow the class Min!8YearsIfAMember: L-53
5. Add validarion message place holder in the form view// also see validation summary: L-55

Client Side validation
----------------------
* asp.net data-annotatio works for both client and server side validation..however custom valiation for server side is not works for client side, it needs custom jquery
1. for client side we need the jqueryvalidaton bundle, however by default it is not refernced anywhere,
2. To do the client side valdiation we first need ot enable jqueryvalidtion to that end of views as below:
	@section script
	{
		
	}
anti-forgery token: L-57
------------------------
1. to avoid anti-forgery: we need to put hepler method > @Html.AntyForgeryToken() before save button in form
2. add annotation in Save-Actin as: [ValidateAntiforgeryToken]

========
Pure view model:
==============
L:60 >> instead of using movie object in genre use the required properties for form and use the view model
We need to refactor codes in view/controller for this purpose too

=======
API
=======
Create/Configure WebApi:
-----------------------
1. Add a new folder to controller named Api
2.Add a new controller to this folder >> righl click > add controller > Web Api 2 empty > name it"here CustomersContoller"
3. For configur: open global.asax.cs > 

Get /PSOT customer: GET/api/customers : L65
------------------------------------------
1. we set the return type of action for a list like IEnumerable
2. before that create a private field foe applicationdbContext and initilaize it in construtor
3. for a single customer we return by id
4. for update use PUT/apii/../id with two param
5.Now check api following L:66

DTO: Data trnasfer object:
-------------------------
1. it is a plain data structure and use to transfer data from client to server and vice-verca
2. as we are returning an object (like customer), when we change any property of it, it can easily break on client side
3. so api should never recieve/return domain object, also using a domain object is not secured, a hacker can easily manipulate it
4. so USe DTO: make a folder in solution as Dtos> bring a class named CustomerDto > put all the properteis except few

Auto Mapper:
-------------
1. Open package Manager console>  install-package automapper -version:4.1 >
2. Now create a mapping profile>> App_Start > add a new class named "MappingProfile" > which need to be derived from profile >
> create ctor > Mapper.CreateMap<Source, target>(); and Mapper.CreateMap<target, source>();
3. Now we need to load it when app starts>> Global.asax.cs >Mapper.Initialize(c => c.AddProfile<MappingProfile>());
4.in the api > change customer by customerDto other as necessary (see code) like: _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);

CamelCasing:
-------------
as JS using camel notation and in our Json it is pascal notation, to make it smooth we can do >> App_Start > WebApiConfig.cs
> add:    var settings = config.Formatters.JsonFormatter.SerializerSettings;
            settings.ContractResolver = new CamelCasePropertyNamesContractResolver();
			settings.Formatting = Formatting.Indented;

IHttpActionResult:
------------------
for restful convention to create resource the status code should be 201 or created not 200. So for more control return form action: 
	- we return  IHttpActionResult instead of CutomerDto at customerController > for createCustomer

Test Api in Postoman
--------------------
for post: slect raw> json >> click header >> header: content-type and value: application/json

=====================================
using JQuery in razor file to delete
====================================
@section scripts
{
    <script>
        $(document).ready(function() {
            $("#customers .js-delete").on("click", function () {
                var btn = $(this);
                //if the confirm return true
                if (confirm("Are you sure you want to delete this customer?")) {
                    //we call the api for delete using jQuery ajax call by passing an object
                    $.ajax({
                        //first we set the url like api/customers/id
                        //for id we can get it from button by data attribute
                        //url: "/api/customers/" + $(this).attr("data-customer-id"),
						url: "/api/customers/" + btn.attr("data-customer-id"),
                        method: "DELETE",
                        success: function() {
                            //console.log("Success!");
                            //to remove the particular row of that button click
                            btn.parents("tr").remove();
                        }
                    });
                };
            });
        });
    </script>
}

========================================
using bootstrap dialogbox: bootboxjs.com
========================================
 -to add bootbox>> open pacjage mangager console > install-package bootbox -version:4.3.0
 - now add reference of bootbox.js in Script to bundle
 -code:

  <script>
        $(document).ready(function () {
            //change the on click by using the class as filter to make it more efficient
            $("#customers ").on("click", ".js-delete", function () {

                var btn = $(this);
                //using bootbox: as bootbox doesnt return boolean we cant use if here, instead it takes a callabck function 
                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    //if the result has true value i.e not null or undefined we make ajax call
                    if (result) {
                        //we call the api for delete using jQuery ajax call by passing an object
                        $.ajax({
                            //first we set the url like api/customers/id
                            //for id we can get it from button by data attribute
                            url: "/api/customers/" + btn.attr("data-customer-id"),

                            method: "DELETE",
                            success: function() {
                                //console.log("Success!");
                                //to remove the particular row of that button click
                                 btn.parents("tr").remove();
                            }
                        });
                    }
                });
                
            });
        });
    </script>

========================================
using data table plugin:
========================================
open pacjage mangager console > install-package jquery.datatables -version:1.10.11
we need use only 2 of many files in DataTables in bundleConfig:
	                        "~/Scripts/DataTables/jquery.dataTables.js",
                        "~/Scripts/DataTables/dataTables.bootstrap.js"
also add datatable style sheet ot css bundle:
					 "~/Content/DataTables/css/dataTables.bootstrap.cs",
now use the code:  $("#customers").DataTable(); in jquery script

use Api as source of data for use datatable: L-79
-----------------------------------------
- after using data-table we remove the table razor code as we dont need server code for datatable
- we need to provide a configaration object inside .DataTable({}) > in this object we need a property call ajax whihc is an object too
 $("#customers").DataTable({
	ajax:{
		  url: "/api/customers",
           dataSrc: ""
	}, //next we specify column which is an array and for each column we suply an obj
	column: [
		{
			//in this object we specify various properties of this column
			---
		}
	]
 })

 - we also need to delere list of movie from movie controler (not api) as we are getting movie list by data table

 To Add membership type: by Eager loading
 ----------------------------------------
 go to Api > customerController > in getCustomers use inlclude()...
 also as we dont have membership type in cusotmerDto we need to add an new class as MembershipTypeDto for id and name
 third, we need to add this membershiptypeDto to auto mapper as >  Mapper.CreateMap<MembershipType, MembershipTypeDto>();
change in dataTable code in Index view for second column data from name to membershipType.membershipName
**Data table bug L-81 : rmoving row for delete from table, but not from internal dataTable list >> to fix: put dataTable in a vriable 
		- var table = ...
		- inside success > use table.row(btn.parents("tr")).remove().draw(); to remove from data table

--------------------------------------------------------------------------------------------------------------------
Authentication:
==============
** add the partial view for longin i.e.  @Html.Partial("_LoginPartial") to the _NavBar.chtml
** pirmary authencitation code is already in soulution like in initialModel migration, identity model and Account views
** L-91:  we need to use [Authourize] attr. which is a filter for authorization. When we apply this attr. to an action before
the action execution it checks if the current user is logged in or not..if not it will redirect the user to the login page
  - we can apply this attr. even for a entire controller (so for all actions in that controller)
  - we can apply this attr. also globally so it will be appy to all controllers actions
** for our solution we like to apply it globally for all controllers actions > App_Start > FilterConfig > here we can register global filter
	-  filters.Add(new AuthorizeAttribute()); > it will block all annonymous user even access the home page
	- if we want the annonymous user to access only the home page > go to home controlle > set [AllowAnonymous] before the class

Seeding user and roles:L-92
---------------------------
**for example we want to restrict movie management to store manager only--------------
 1. we need to create that particular role in our app
 2. And when we deploy the app we should have a user to assign to this role
- register a guest user as guest@vildi.com
- go to AccountController > async Register() > modify the logic of this action to assign any new user as store manager
	>> here we are doing so to populat the database with a user for store mangerd role (2 req.) this is Temp Code, which we will remove later
	>> Temp Code: to create a user > roleStore and roleManager (temp code) > after that create a new user after building the solutinon
	>>Now rmove all temp code for cretings user
	>> we have two user one guest and one adimin, now we need to add those to db
	>> make a migration > open the migration file which is empty now > need to put the sql script for it
		>>> quick way to do it > App_Data > open apnet-vidli db > Tables > r.click AspNetUsers > show table data 
			> select both created data > r.click and select script > copy > go to migratin Up > sql(@" copy those here ")
			> back to sqlServerObjectExplorer > aspnet-Vidli > tables > aspNetRoles >r.c .. sript > copy and paste in migrtion
			> back to sqlServerObjectExplorer > aspnet-Vidli > tables > aspNetUserRoles
			> now remove those from db > aspNetRoles > viw data > r.c delte ..also for AspNetUSers
			> run the migration by update-database

working with roles L 93
-----------------------
- for user with less previlige we can make lot of if else to show which should be for which user but that is comples
- so it is better to create a new simple view for less previliged user > we create a new view in Movie copy of index as ReadOnlyList
- also for consistency rename the index as list
- from ReadOnlyList delte the necessary fields like link, delete which needed for create, update and delete
- now go to moveController > inside Index Action > add if (User.IsInRole("CanManageMovies")) return View("List") else return View("ReadOnlyList")
- now we can access by two roles created in two different views, however still there are security holes as the geuset can edit movie by putting new in url
- to solve it put > [Authorise(Roles ="CanManageMovies, ohter user if we wish")]
- to avoid magic string of "CanManageMovies" > make a static class in models named RoleName and have a const. for it

Adding more field for user registration: L94
---------------------------------------
** We may wish to add more fields for user reg. along with basic fields are given in ASP.NET, like a DrivingLicence for user
- first, we need to start with model class i.e. IdentityModels.cs > ApplicationUser class > public string DrivingLicence { get; set; }
- decorate it with some attributes like [required] , so we changed the domain and for that reason we need to create migration
- add-migration AddDrivingLicenseToApplicationUser > update-database :: already created user will receive an empty string for this field not null 
- next, we need to go to views > account > register > crete a div for this field as required
- however our driving licence is not found here as the view is rendering RegisterViewModel > so go to that model (which is inside AccountViewModel 
> add that field inside it > 
- finially, when the form is posted we need to get this drivinglicense and put it in the domain object, So go to >Controller > AccountController > Register(RegisterViewModel model)
> initilaize the driving license inside ApplicationUser

Loging thru Social sites:
-------------------------
** the social sites like fb, google, twitter use a authention protocol called "OAuth" i.e. Open Authorization
** for example: Z is new member and wants to login in vidli by fb > first we need to register vidli wiht fb to create some kind of partnership
   > fb will provide a Api key and a secret like username and password > when Z wants to login thru fb > then vidli will use Api key and secret so that fb knows that it is vidli
   > to avoid hacker we use https or secure http protocol > the data exchange will be encrypted so no one can intercept > when Z logs into fb to enter vidli
   > fb tells Z that vidli wants to access some of his info > now Z can authorize vidli to access those info > Now fb will redirect Z to vidli
   > fb will also pass an authorization token > this token tells vidli that fb could able to successfully authenticate this user
   > vidli send the token along with key and secret back to fb > this is done to avoid hacking > then fb probide an access token to get some user info
**  Mechanics for social login: we need to follow two steps
	1. Enable SSL(for secure communication by a secure channel)
	2. Regsiter app with fb
** The process:
 >> to enable SSL: > Select Slolution Expl(vidli) and press F4 to get projectProperties > set ssl enable to "true" > now we will find a SSL url
  > copy that SSL Url > r.click project and go to properties > Web > Project Url > replace it wiht new address > run the app > there will be dialog boxes click yes
  >> we can still access the site with previous usl > so go to App_start > FilterConfig > filters.Add(new RequireHttpsAttribute()); > now it will not be available in http channel
**Register with fb:
 go to /developers.facebook.com > register as a developer > after login > add a new app > go as required and put the url of site like: https://localhost:44369
 > copy the App Id from dashboard > go to solution >App_start > Startup.Auth > comment out fb authentication > 
 > need to run : Install-Package Microsoft.Owin.Security.Facebook > also need some trouble shooting: https://stackoverflow.com/questions/46850461/cant-load-url-the-domain-of-this-url-isnt-included-in-the-apps-domains-in-fa
 > after giving email > there is an error for validaton exception due to to new field of dricing license which is not in rgistration via social login > to solve it >
 > solution > views > Account > ExternalLoginConfirmation > dopy driving field form Register > Go to AccountViewModel as the view model are different here > 
 > in class: ExternalLoginConfirmationViewModel > make prop for driving license > also need to initialize it in AccountController in ExternalLoginConfirmation action


 =============================
 Performance Optimization
 =============================
 **most performance can be optimized by optimizing sql quries for db 
 Glimpse : to diagnosis performance
 ----------------------------------
 in console > install-package glimpse.mvc5 > install-package glimpse.ef6 > run app > navigate to glimpse like: https://localhost:44369/glimpse.axd > and check for more time execution part

 Output Cache: L-104
 ------------
 cache can be helpful for optimizing performance when someone start the app it stored the rendered html on cache, and next time 
 it will serve from the cache. 
 Now enable cache > decorate any action wiht [output cache] attr. > for disable caching look into lecture [OutputCache(Duration = 0, VaryByParam ='*', NoStore = true)]
 Caching partucular data: L-105
 ------------------------
 Disabling Session:
 ---------------------
 web.config > <sytem.web><sessionState mode="Off"></sessionState> <>
 Client Tire Optimization: L-109
 -------------------------

 =========================================================
 Building a feature end to end process: A Rental Form L113
 =========================================================

 Understand the problem:
 -----------------------
  **in this form user can look up a customer + movies want rents. After sumbit the form there will be a toast confirmation
  UseCase: Add the ability to record rentals. 
		   Explanation: the customer comes to counter and gives the movies to staff for record it.Staff identify the customer in
		   the  app and then add movies in the list of movie the customer wants to rent.
Approach: we can start either from front end or back end both are ok. Here we will start from back end so there is less complexity that can arise from a complex UI.
			We focus on the input/output of the app.
			Input:Id of customer and movies they want to rent
			Output: For now there is no output like order receipt or something
Action: In the back end we need an action that our front end will call later. we can do it in MVC contorller /Api Controller. It depends what we want to return
		MVC Contr: if we want to return a mark up then it is appropriate
		API Contr: if we want to return data.
	*In our case we dont need markup from server as we will use js to clear the form and toast notification. So we can use API controller

 Domain Modeling:
 ----------------
-  We need to create a Dto containing cusotmer Id property and and a list of movie id property as a customer can rent more than one movie
- the this is that from UML diagram we find that the realtionship between the customer and movie are many to many as a customer can rent many movie and a movie can be rented by many customer 
 - in this cas we need to make many to one : we need a association attributes in the between i.e. we need a class for association
 -Here we make an association class named Rental. this is a domain class where we put attribute for table Id, dateRented, dateReturned, and customer - movie properties for referencing
 - we also need to add DdSet<Renatl> in ApplicationDbContext of IdentityModle class.
 - then Create Migration and update database

 Building API: L:117 ?
 ------------
 - create a new API controler named NewRentalController > create an action named CreateNewRental > it is a [HttpPost] as we post data from form
 - here we need to load the customer and movies based on the id of them. and then for each movie we need to create a newRental object for each movie for given customer and add it to DB
 - we also need to check the availablity of movie > availability = NumberInStock - ActiveRentals(rental dont have returned date
 -however the above calculation for each movie will have impact on performance as every time it need to calculate and for growing data it will impact on performance
 - Alternatively, we can add a new property to Movie class i.e. NumberAvailable > initially it is same as stock > but when a customer rent that movie decreases by one and when return increases by one
 - it will make our query to db more simplier. For this we need to:
		= add a property to movie class >  public byte NumberAvailable > create a migration
		= in the new migration .cs file write a Sql query for setting the intial stock as avialble stock > Sql("UPDATE Movies SET NumberAvailable = NumberInStock");
		= reduce the NumberAvailable in foreach block of API action

 Edge Cases: 118
 ------------
 *there can be 4 edge cases. What are them
 1. CustomerId is invalid
 2. No MovieIds i.e. there is no movie so the list is empty
 3. One or more MovieIds are invalid
 4.One or more movies are not available
** we can use if statemnts to check each cases and explicitly return error message which is good for public API. However for an internala API like this one it is better
  to go with "Opetmestic" approach not defensive one:
  1. for customer we use Single method instead of SingleOrDefault
  2. for movies we only check the avialabilty i.e. if NumberAvailable == 0 we return a error message

Fron End:
---------
* there is a different way to post data to server which is faster. we use Ajax instead posting data using traditional Html form
>> but first we need to create view as per controller > so crate a controller named RentalsController thru MVC5 empty controller
 > rename it as New > in the view > as we want to use Ajax to post data we use raw htim form as we dont want to use action > the data need to show in same page instantly
 > we can use Zencoding for faster html > div.form-group>label+input[type='text'].from-control > press tab
 > also put a button link in the navbar of rental option > shared > _navbar.chtml >

 Auto Completion:
 ----------------
 *in our new form for Rental we want to add autocompletion and search 
 >> for auto-completion we will use a plugin of twitter > in console > install-package Twitter.Typeahead
  > go to bundle_config > add in lib > ~/Scripts/typeahead.bundle.js"
  > we also need to borrow some style from typahead > search for typeahed.js in browser > Examples > we want the Basic > view soruce > ../css/example.css > copy from .typeahed to .tt-suggestin p {} 
  > add a new stylesheet called typeahead.css > add it to css bundle
  > go to Example page > click Remote > copy the js code from there > go to new form > add script section and paste the code inside documetn.ready() > change some part of it like bestPictures to customers
  > change the 'value' to 'name' as customers dont hve abt value and we want them by name > delete Prefetch > in Remote change url to  url: '/api/customers?query=%QUERY',
  > change the id in typeahead to customers and assing the id in customer textBox > also change typeahead(null) parm to > 
				:	:mimLength: 3, // need 3 char to type for a search
					highlight: true,
> change name - customers, display - name , source - customers > also add > .on("typeahead-select", function(e, customer) {
                vm.customerId = customer.id; to typeahead > vm is a declared empty object to hold the csutomerId from front end. so that later we can send the vm to webApi
> do the same for movie > but we want to add it in a list > create li for movie in form before button > but here inside the callback function we append the list as : $("#movies").append("<li>" + movie.name + "</li>"); to update DOM

Filtering record:
----------------
* Now we are getting more than on name from server while typing three letter. We need to filter it to get only the desired one
 - go API - customersController > in getCustomers provide a param like GetCustomers(string query = null) > break the customerDto to two parts as customerQuery and customerDto as per code

POST the Rental form:
---------------------
- first we need to give an id (id =newRental) to this form to use with jQuery like
		$("#newRental").submit(function(e) {
			//see code in solution
		})
- 
Toast Notification:
-------------------
* we will use a very popular jQuery plugin called toaster. So
package console > install-package toastr > bundleConfig > css bundle > ~/Content/site.css" > and in lib > 
> go to form > use toastr.success("message) in .done section > also need to put name="customer" attr in input field

Client side validation:
-----------------------
*In bundleConfig there is a bunlde "~/bundles/jqueryval" for jquery validation. We need to include jQuery validation in pages where needed
For example in the rental new form we can add this inside script section as > @Scripts.Render("~/bundles/jqueryval")
- we can add "reqiured" in the form input field like in customer and jQuery validation will understand it
- plugin validation: we can use $("#newRental").validate() and put submission code inside it, see code
- Custom validator: we need it for like if we type any letter in customer field it will accept but which is not valid. How:
		> before (n#ewRental).validate > .validatro.addMethod("validCustomer", function(... >
		> to use it > in the customer input field > data-rule-validCustomer = "true"
		> we need to clear form, reset vm in .done()