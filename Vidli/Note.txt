        // GET: Movies/Random
        //public ActionResult Random()
        //{
        //    // initialize a movie object
        //    //var movie=  new Movie{Name = "Shrek"};
        //    ////list of customer
        //    //List<Customer> customers = new List<Customer>
        //    //{
        //    //    new Customer{Id = 101, Name = "Customer1"},
        //    //    new Customer{Id = 102, Name = "Customer2"},
        //    //    new Customer{Id = 103, Name = "Customer3"},
        //    //};

        //    //create a viewsmodel object and initalize it
        //    //var viewModel = new RandomMovieViewModel
        //    //{
        //    //    Movie = movie,
        //    //    Customers = customers
        //    //};
        //    //we can pass data to view by controller property ViewData dictionary
        //    //ViewData["Movie"] = movie; //like using a key for the data
        //    //by usnig viewbag
        //    //ViewBag.Movie = movie;
        //    //it is better not using both of the above rather using model
        //    //return View(viewModel);  
        //    //return HttpNotFound();
        //    //return new EmptyResult();
        //    //return Content("Hello");
        //    //return RedirectToAction("Index", "Home", new{page= 1}); //third one is annonymous object
        //}

		//optional parameter : retrun a list of movies //movies
        //public ActionResult Index(int? pageIndex, string sortBy) //? to make nullable
        //{
        //    //if page index is not specified the movie will displayed in page 1
        //    if (!pageIndex.HasValue)
        //        pageIndex = 1;
        //    //if sort by is not specified movies will be sort by their name
        //    if (String.IsNullOrWhiteSpace(sortBy))
        //        sortBy = "Name";
        //    return Content($"pageIndex={pageIndex} & sortBy={sortBy} ");
        //}

        
        //type: MVCAction4 for code snippet
        //for custom route: movies/released/{year}/{month}
        //we will use attribute route with url and constrains
        [Route("movies/released/{year}/{month:regex(\\d{2}):range(1,12)}")]
        public ActionResult ByReleasedDate(int year, byte month)
        {
            return Content(year + " / " + month);
        }
Create project
==============
by clicking both MVC and WebApi also single user ac

ViewModel
=========
we need viewModel folder to contain class for view as Model class are suppose to act as domain class

Partial Views
=============
Shared > add > _NavBar (by convention it starts wiht _) > click tick on partial views, so that it will not have a layout

Rendering partial views: here we did it in _Layput.chtml >> @Html.Partial("name of partial view", can put model as second arg)

collapse : put cursor and press cntrl + m (twice)

using model pref in view
========================
@model Vidly.Models.Movie 
ActionLink:
==========
@Html.ActionLink(
    linkText,
    actionName,
    controllerName,
    routeValues: new {
        Param1Name= Param1Value, 
        Param2Name = Param2Value 
    },
    htmlAttributes: null
)

will generate link as: /Controller/Action/Param1Value?Param2Name=Param2Value


@model Vidly.ViewModels.RandomMovieViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

====================
Code First Approach:
====================

Code First Migration
--------------------
*First install Entity Framework
* Add a class to main porject as belpw
    public class MyDbContext:DbContext 
    {
        public MyDbContext()
        {
 
        }
    }
* Tools > Nuget Package Manager > Package Manager Console > to enable migrations -(w) enable-migrations
//To create migrations: (w) add-migration "Migration_Name"
//to over right: (w) add-migration "name" -force
//to generate databse throug migration: (w)update-database
//cls to clear screen
//for updating model for new entity in table or new business rules > we should create small changes > create migration 
// > run in DB :: changes in Customer Model > add-Migration 'AddIsSubscribedCustomer' > update-databse
//for populating table with data: do it by migration:: add-maigratin PopulateMembershipType
//now inthe up method provide sql query in Sql() and at last > update-database

addColumn:
---------
//make new properties in desired model
//create a new migration and update db

Update/insert column:
--------------
//make new migration
//provide sql query with UPDATE/insert
//update db

AlterColumn:
------------
//put attribute like [Rquired] in Model class properties and then make a new migration and at last update db

Query Object using EF: (in customer controller we did it for hard coded data in GetCustomer)
----------------------
1. we need a dbcontex to access DB. So we declare a private field in Controller:
	private ApplicationDbContext _context;
2. then we need to initialize it in constructor
3. As dbcontext is a disposable object we need ot dispose it properly as below
	  protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }
4.now assigned _context.cusotmer to customers object which is a DBset for differed execution from db - 
	a DBset is the collection of all entities in the context
5. to get the customer data from db we need to iterate thru the customers object or we can do it by adding ToList() also using SingleOrDefalt() in Detail route
6. Now we can populate customer table with some data as we are doing it as aribatry so no need it by query and migration and we will not get this data later from migration: 
	rightClick dbo.Customers table of SqlServerObjectExplorer > view data > provide data
5. Eager loading: to load related object : here Membershiptype is related object to customer, so to get the info of Membershiptype we need to
	-need to load Customer and MembershipType together > use Include(Expressions) after _context.Customer in Customer controller

Make a short cut for console Manager
====================================
tools > options > Environment > keyboard > type: packagemanagerconsole > in shortcut: hold alt key and press / and . >assign >ok/

================
Forms: leture: 38
================
1. Make a actionResult (new for example) in controller
2. Create a view for it
3. In chtml > Html.BeginForm("Name of the target Actinon", Controller)  - this is a begining tag of form - a form is also a disposable object
	for this reason we add @using(Html.BegingForm(..)) {...} so it can be disposed and in the disposed method it will render the closing </form>
4.to render modern responsive form: we need to follow special mark up like: wrap each input field in >> 
	<div class="form-group"></div> - which is also bootstrap understand.
5. Inside the div we can use raw html or Html.LabelFor(use a lambda expression for the targer properties from model);
6. for textbox: we can use raw html or Html.TextBoxFor(m => m.Name) - this is helpful for like data-validatino auotimatically as per model
7. as the second arg in Html.TextBoxFor(m => m.Name, 2nd) > we can pass an annonymous obj. like (.., new {@any propertis add to this object will render as html attrbutes})
	Like: (.., new {@class="form-control"}) - this will give form a modern look and feel from bootstrap class
Form-Lables:
-----------
if we want to change the label name from the property name of model there are two ways
1. we cand do it with raw html <label for="Birthdate"> Date of Birth </label> - here 'for' is used to focus it for Birthdate properties
2. we can use data-annotations in model porpeties like: [Display(Name= "Date of Birth")] for Birthdate properties

Drop-Down: 40
-------------
1. check if there is already a dbset declared for your model, if not create it in identity model
2. declare a context object for it in new route as: var membershipTypes = _context.MembershipTypes
3.To add a dropDown in view: @Html.DropDownListFor(m => m.Customer.MembershipType,2nd arg, 3rd, 4th})
	2nd arg: list of items for the dropdown (..., new SelectList(lsitOfItems, ))
	: (..., new SelectList(Modle.MembershipTypes, property holds the value, property that holds the text))
	3rd arg: " " - possibly as it will be at the top or "Select"
	4th: the annonymous obj for html bootstrap

Model Binding and using button:
-------------------------------
1. add a button at the end
2. make the "create" action in controller to pass from date with [HttpPost] annotation
3.add a parameter for model binding: for example data for newcsutomerviewmodel, we need to pass a param that object type, but here we will bind it with customer as all the data are prefix wiht customer
4. now to add the data to db we need add it first to context as a part of our changes(add/modify/delete)
5. persist this changes we need to save changes: _context.SaveChanges(). it will generate sql statement and all this will wraped in a transaction
6. at this point we need to redirect to desired page (here it is list of customer)

Edit form
---------
1. we changed the detail action in index view to Edit actin and added an action in Customer controller. There is a id param in view which will send to Edit
2. in the Edit action: we initialize customer and membershiptype context for the particular viewModel (CustomerFormVeiwModel)
3.return a view (here it is CustomerForm which will populated by data from customerFormViewModel)
update:
------
4. One approach is to modify the current name of "create" action/view to 'save' (another by creating a new view name update)
5. in the save action: we check if the customer has an id or not, if the id ==0 > it is a new customer, so add it db > if not - it is an existing one and update it in db
6. in update (else): we need to first get the data of customer form db as per the id
7. now we update it: and it can be in two ways: a. using TryUpdateModel() however it leads to poor security
** as we are doing it as per customerId, we need to gram customer id from from, so we need to set it in from as hidden field
**Troubleshooting entity validatin: L-47

================
Validation :L-50
=================
1. there are three steps
	a. add data annotations in entities(model-properties)
	b. use ModelStat.Valid - if valid change the flow of the progra if not return the same view (ex: customerController/save)
	c.Add validatin message next to each field in the form //@Html.ValidationMessageFor(m=>m.) //to change the color use span>class: "field-validation-error " in css
Validation by data annotation:
-----------------------------
1. see cheat sheet for data annotation :[Required]/ [Range(1,10)]/[Compare("Other property like password")]
2. all these data annotation has default validation message, but these messages can be overrite, as for required: [Required(ErrorMessage ="...")]
Custom Validation:
------------------
1. for example we implement a business rule like for any membership the cusotomer needs to be 18 years old except "Pay as you go"
2. we make a class for this purpose which derives from ValidationAttribute class
3.override IsValid() then put annotation in Birthdate properties of customer with the created class name, like [Min18YearsIfAMemeber]
4. Follow the class Min!8YearsIfAMember: L-53
5. Add validarion message place holder in the form view// also see validation summary: L-55

Client Side validation
----------------------
* asp.net data-annotatio works for both client and server side validation..however custom valiation for server side is not works for client side, it needs custom jquery
1. for client side we need the jqueryvalidaton bundle, however by default it is not refernced anywhere,
2. To do the client sidd valdiation we first need ot enable jqueryvalidtion to that end of views as below:
	@section script
	{
		
	}
anti-forgery token: L-57
------------------------
1. to avoid anti-forgery: we need to put hepler method > @Html.AntyForgeryToken() before save button in form
2. add annotation in Save-Actin as: [ValidateAntiforgeryToken]