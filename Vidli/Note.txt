Create project
==============
by clicking both MVC and WebApi also single user ac

ViewModel
=========
we need viewModel folder to contain class for view as Model class are suppose to act as domain class

Partial Views
=============
Shared > add > _NavBar (by convention it starts wiht _) > click tick on partial views, so that it will not have a layout

Rendering partial views: here we did it in _Layput.chtml >> @Html.Partial("name of partial view", can put model as second arg)

collapse : put cursor and press cntrl + m (twice)

using model pref in view
========================
@model Vidly.Models.Movie 
ActionLink:
==========
@Html.ActionLink(
    linkText,
    actionName,
    controllerName,
    routeValues: new {
        Param1Name= Param1Value, 
        Param2Name = Param2Value 
    },
    htmlAttributes: null
)

will generate link as: /Controller/Action/Param1Value?Param2Name=Param2Value


@model Vidly.ViewModels.RandomMovieViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

====================
Code First Approach:
====================

Code First Migration
--------------------
*First install Entity Framework
* Add a class to main porject as belpw
    public class MyDbContext:DbContext 
    {
        public MyDbContext()
        {
 
        }
    }
* Tools > Nuget Package Manager > Package Manager Console > to enable migrations -(w) enable-migrations
//To create migrations: (w) add-migration "Migration_Name"
//to over right: (w) add-migration "name" -force
//to generate databse throug migration: (w)update-database
//cls to clear screen
//for updating model for new entity in table or new business rules > we should create small changes > create migration 
// > run in DB :: changes in Customer Model > add-Migration 'AddIsSubscribedCustomer' > update-databse
//for populating table with data: do it by migration:: add-maigratin PopulateMembershipType
//now inthe up method provide sql query in Sql() and at last > update-database

addColumn:
---------
//make new properties in desired model
//create a new migration and update db

Update column:
--------------
//make new migration
//provide sql query with UPDATE
//update db

AlterColumn:
------------
//put attribute like [Rquired] in Model class properties and then make a new migration and at last update db

Query Object using EF: (in customer controller we did it for hard coded data in GetCustomer)
----------------------
1. we need a dbcontex to access DB. So we declare a private field in Controller:
	private ApplicationDbContext _context;
2. then we need to initialize it in constructor
3. As dbcontext is a disposable object we need ot dispose it properly as below
	  protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }
4.now assigned _context.cusotmer to customers object which is a DBset for differed execution from db - 
	a DBset is the collection of all entities in the context
5. to get the customer data from db we need to iterate thru the customers object or we can do it by adding ToList() also using SingleOrDefalt() in Detail route
6. Now we can populate customer table with some data as we are doing it as aribatry so no need it by query and migration and we will not get this data later from migration: 
	rightClick dbo.Customers table of SqlServerObjectExplorer > view data > provide data
5. Eager loading: to load related object : here Membershiptype is related object to customer, so to get the info of Membershiptype we need to
	-need to load Customer and MembershipType together > use Include(Expressions) after _context.Customer in Customer controller

Make a short cut for console Manager
====================================
tools > options > Environment > keyboard > type: packagemanagerconsole > in shortcut: hold alt key and press / and . >assign >ok/
