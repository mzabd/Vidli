using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using AutoMapper;
using Vidli.Dtos;
using Vidli.Models;

namespace Vidli.Controllers.Api
{
    public class MoviesController : ApiController
    {
        //application dbcontext for accessing db
        private ApplicationDbContext _context;

        //intiialize it
        public MoviesController()
        {
            _context = new ApplicationDbContext();
        }

        //as we return a list of object i.e customer by convention it will resoponse to 
        //GET/api/movies
        public IHttpActionResult GetMovies(string query = null) //param for filtering movie
        {
            //only the query to db for all movie with genre. Also we need filter to see if the number or movie availabe is greater than 0
            var movieQuery = _context.Movies
                .Include(m => m.Genre)
                .Where(m => m.NumberAvailable > 0);

            //filter the movie for rental form if there is a query i.e. entered 3 char
            if (!String.IsNullOrWhiteSpace(query))
            {
                //get the deisred selected movie by name by 3 char i.e query from th moveiQuery and store it agian to it
                movieQuery = movieQuery.Where(m => m.Name.Contains(query));
            }
            //get the movie in list and map it
            var movieDtos = movieQuery.ToList().Select(Mapper.Map<Movie,MovieDto>);



            return Ok(movieDtos);
        }

        //GET/api/movies/id
        public IHttpActionResult GetMovie(int id)
        {
            var movie = _context.Movies.SingleOrDefault(c => c.Id == id);

            //if customer is not found 
            if (movie == null)
                return NotFound();

            return Ok(Mapper.Map<Movie, MovieDto>(movie));
        }

        //create a movie
        //POST/api/movies
        [HttpPost]
        [Authorize(Roles = RoleName.CanManageMovies)]
        public IHttpActionResult CreateMovie(MovieDto movieDto)
        {
            //if not valid
            if (!ModelState.IsValid)
                return BadRequest();

            //create movie object
            var movie = Mapper.Map<MovieDto, Movie>(movieDto);
            //add to context
            _context.Movies.Add(movie);
            //save changes to db
            _context.SaveChanges();

            //this movie object has an Id that generated by db not by form, and need to add this id to dto
            movieDto.Id = movie.Id;

            //return created: we need to supply an url in Created 
            //the uri should have: api/cusotmers/id
            //for the second arg we need to pass the actual obeject that was createdd i.e. is mvoieDto
            return Created(new Uri(Request.RequestUri + "/" + movie.Id), movieDto);
        }

        //update move
        //the url is like: PUT/api/customers/id
        [HttpPut]
        [Authorize(Roles = RoleName.CanManageMovies)]
        public IHttpActionResult UpdadeMovie(int id, MovieDto movieDto)
        {
            //if request is not valid
            if (!ModelState.IsValid)
                return  BadRequest();
            //get the movie from db
            var movieInDb = _context.Movies.SingleOrDefault(m => m.Id == id);

            //if customer is not found 
            if (movieInDb == null)
                return NotFound();
            //map movie to dto, and also need to pass the second arg i.e. movieInDb to load it 
            Mapper.Map<MovieDto, Movie>(movieDto, movieInDb);


            //save the chagnes to context
            _context.SaveChanges();

            return Ok();
        }

        //for Delete
        //DELETE /api/customers/id
        [HttpDelete]
        [Authorize(Roles = RoleName.CanManageMovies)]
        public IHttpActionResult DeleteMovie(int id)
        {
            //get the customer from db
            var movieInDb = _context.Movies.SingleOrDefault(m => m.Id == id);

            //if customer is not found 
            if (movieInDb == null)
                return NotFound();

            //remove customer from db
            _context.Movies.Remove(movieInDb);
            _context.SaveChanges();

            return Ok();
        }
    }
}
