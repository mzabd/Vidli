using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using AutoMapper;
using Vidli.Dtos;
using Vidli.Models;

namespace Vidli.Controllers.Api
{
    public class CustomersController : ApiController
    {
        //application dbcontext for accessing db
        private ApplicationDbContext _context;

        //intiialize it
        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //as we return a list of object i.e customer by convention it will resoponse to 
        //GET/api/customer
        public IHttpActionResult GetCustomers(string query = null) //usnig param for filtering customer list i.e if query is provide as name it will find that name or it will get the list of all
        {
            //return the list of customer from Customers table in db
            //var customerDtos = _context.Customers
            //    .Include(c => c.MembershipType)
            //    .ToList()
            //    .Select(Mapper.Map<Customer, CustomerDto>); //using select, for mapping and referncing
            var customerQuery = _context.Customers
                .Include(c => c.MembershipType);

            //apply filter
            if (!String.IsNullOrWhiteSpace(query))
            {
                customerQuery = customerQuery.Where(c => c.Name.Contains(query));
            }

            var customerDtos = customerQuery.ToList().Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
        }

        public IHttpActionResult GetCustomer(int id) //usning IHttpActionResult
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            //if customer is not found 
            if (customer == null)
                return NotFound();

            //return Mapper.Map<Customer, CustomerDto>(customer);
            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        //create a customer: when we create a resource we return that to client
        //POST /api/customers
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto) //use IHttpAction.. which has several helper method
        {
            //if not valid
            if (!ModelState.IsValid)
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
                //instead of throw exception we can use helper method as below
                return BadRequest();

            //create a customer object
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);
            //otherwise add the changes to Customers table context and save the changes
            _context.Customers.Add(customer);

            _context.SaveChanges();

            //this customer object has an Id that generated by db not by form, and need to add this id to dto
            customerDto.Id = customer.Id;
            //return created and also pas URI - Inified resource identifier 
            //the uri should have: api/cusotmers/id
            //for the second arg we need to pass the actual obeject that was createdd i.e. is customerDto
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //for update we use PUT and it can return a customer or void
        //the url is like: PUT/api/customers/id
        //id form url to get the customer from db and customer from request body i.e. the updated info
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto) 
        {
            //if request is not valid
            if (!ModelState.IsValid)
                return BadRequest();
            //get the customer from db
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //if customer is not found 
            if (customerInDb == null)
                return NotFound();
            //map cusotmer to dto, and also need to pass the second arg i.e. customerInDb to load it in form
            Mapper.Map<CustomerDto, Customer>(customerDto, customerInDb);


            //save the chagnes to context
            _context.SaveChanges();

            return Ok();

        }

        //for Delete
        //DELETE /api/customers/id
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            //get the customer from db
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //if customer is not found 
            if (customerInDb == null)
                return NotFound();

            //remove customer from db
            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            return Ok();
        }


    }
}
